public class Main {
    public static void main(String[] args) {
        String mesaj = "Bugün hava çok güzel.";
        System.out.println(mesaj);

        /*
        //'length()' operasyonu
        System.out.println("Eleman sayısı : " + mesaj.length());  //'length()' fonksiyonu string bir değişkendeki(bu örneğe göre 'mesaj' değişkeni) eleman sayısını(karakter sayısını) verir. Yani "Bugün hava çok güzel" ifadesinde '20 tane karakter(eleman)' vardır. NOT: İki tırnak arasında yazılan tüm karakterlerin toplamı string olur ayrıca 'boşluk' bırakmakta bir karakter sayılır bundan dolayı bu örneğimizdeki karakter sayısı toplamı 20 oldu.(Yani boşlukta bir karakterdir.)

        //'charAt()' operasyonu
        System.out.println("5. eleman : " + mesaj.charAt(4));     //Bu örnekte ise string türdeki değişkenin 5.elemanını(karakteri) yani aslında 4. index'ini vermek istiyoruz.(İndex sayımı 0'dan başladığı için 5.eleman(yani karakter) aslında 4. index demektir.) Kısacası elimizdeki string ifadenin 5. karakterini bulmak istiyoruz. Bunun için kullanacağımız fonksiyon 'charAt()' fonksiyonudur. Bu fonksiyon index mantığıyla çalışır dolayısıyla 0'dan başladığımız için 5.eleman(karakter) aslında 4.index'teki elemandır. Yani 'charAt(4)' yazıp fonksiyonu kullanırız. String türdeki değişkenimizin adı 'mesaj' olduğundan 'mesaj.charAt(4)' yazarak fonksiyonu tamamlarız. Kodu çalıştırırsak mesaj değişkeni olan "Bugün hava çok güzel" ifadesindeki 5.elemanı(karakteri) yani 4.index'i bize 'n' olarak ekrana yazdırır.

        //'concat()' operasyonu
        System.out.println(mesaj.concat(" Yaşasın!"));        //İki tane metni(string'i) birleştirme operasyonu 'concat()'dır. İngilizce 'concatenation(birleştirmek)'dan gelir. Operasyonu yapmadan önce değişkenimiz olan String mesaj = "Bugün hava çok güzel."in sonuna '.(nokta)' karakterini koyduk. Sonra buraya gelip birleştirmek istediğimiz ifadeyi yani " Yaşasın!"ı başında bir boşluk bırakarak yazdık.(Tırnak işaretinden sonra bir boşluk bıraktık. Böylece birleştirme yaparken bir boşluk bırakıp ondan sonra 'Yaşasın!'ı yazdıracaktır.) Birleştirme operasyonunu şöyle yaparız; 'mesaj.concat(" Yaşasın!")' şeklinde yaparız. Yani kısacası tanımladığımız string değişkeninin adını(mesaj) yazıp ardından '.(nokta)' koyarız sonra birleştirmek istediğimiz string ifadeyi 'concat()' operasyonundaki parantez içine yazıp işlemi tamamlarız. Kodu çalıştırırsak çıktı olarak bize 'Bugün hava çok güzel. Yaşasın!' ifadesini verdiğini görürüz.
        System.out.println(mesaj);  //Yukarıda birleştirme işlemini yaptıktan sonra burada tekrardan 'mesaj' değişkenini çıktı olarak almak istersek bize 'Bugün hava çok güzel.'i verdiğini görürüz. Yani 'mesaj' değişkeninin birleştirilmiş hali olan 'Bugün hava çok güzel. Yaşasın!'ı değilde orijinal hali olan 'Bugün hava çok güzel.'i yazdırdı. Bunun nedeni ise yukarıda yazdığımız 'mesaj.concat(" Yaşasın!")' ifadesinin aslında yeni bir string oluşturmasıdır. Burada dikkat etmemiz gereken nokta bu yeni oluşturulan birleştirilmiş string ifadesini yeni bir değişkene atamamış olmamızdır. Dolayısıyla sadece bir kere ekrana yazdırdık ve işimiz bitmiş oldu. Eğer birleştirilmiş haldeki kodun çıktısını illa başka bir yerde kullanmak istiyorsak bunu bir değişkene atayarak yapabiliriz. Mesela 'mesaj2 = mesaj.concat(" Yaşasın!")' diyip ardından 'mesaj2'yi ekrana yazdırırsak bize 'Bugün hava çok güzel. Yaşasın!'ı çıktı olarak verdiğini görürüz. Yine istersek daha sonra bu 'mesaj2' değişkenini(yani birleştirilmiş ifade olan 'Bugün hava çok güzel. Yaşasın!'ı) istediğimiz yerde çağırıp kullanabiliriz.

        //'starsWith()' ve 'endsWith()' operasyonları
        System.out.println(mesaj.startsWith("A"));  //'startsWith' yazıp bakarsak ide'miz bize sonucun 'boolean' olarak verildiğini söyler. Yani console'da 'true' ya da 'false' çıktısını göreceğiz. Bu 'startsWith()' operasyonu 'return' eden bir fonksiyondur. Operasyonumuzun kullanımına gelirsek 'startsWith = ile başlıyor mu?' demektir. Yani burada 'mesaj.startsWith("A")' dersek 'mesaj değişkeni "A" harfi ile başlıyor mu?' demiş oluruz. Sonucu bize 'false' olarak döndürür çünkü mesaj değişkeni "B" harfi(Bugün) ile başlıyor. Özetlersek 'mesaj.startsWith("A")' operasyonu mesaj değişkeni "A" ile başlıyorsa 'true' döndürür fakat "A" ile başlamıyorsa 'false' döndürür. Yani ne ile başladığını sorgulamak istediğimiz karakteri operasyondaki parantez içerisine yazıp kodu çalıştırarak çıktımızı 'true' ya da 'false' olarak alırız. NOT: Burada dikkat etmemiz gereken bir diğer nokta şudur; mesela operasyondaki parantez içerisine "b" harfini yazıp çıktı almayı denersek bize sonucu yine 'false' olarak verir. Çünkü java dili büyük-küçük harf duyarlı bir dildir. Dolayısıyla 'true' çıktısını almak için "B" harfini operasyon içine yazmamız gerekir.
        System.out.println(mesaj.endsWith("."));    //'endsWith()' operayonumuzda çıktı olarak 'boolean' değer olan 'true' ya da 'false'dan birini döndürür. 'endsWith() = ile bitiyor mu?' demektir. Burada 'mesaj.endsWith(".")' dersek 'mesaj değişkeni "." ile bitiyor mu?' demiş oluruz. Bakarsak mesaj değişkenimiz '.' karakteri ile bittiği için bize çıktı olarak 'true' değerini döndürür. İşlemi özetlersek 'mesaj.endsWith(".")' operasyonu mesaj değişkeni "." karakteri ile bitiyorsa 'true' döndürür fakat "." ile bitmiyorsa 'false' döndürür. Yani ne ile bittiğini sorgulamak istediğimiz karakteri operasyondaki parantez içerisine yazıp kodu çalıştırarak çıktımızı 'true' ya da 'false' olarak alırız.

        //'getChars()' operasyonu
        char[] karakterler = new char[5];  //'char' türünde 'karakterler' adında bir array oluşturduk. Ve bu array'i 'new char[5]' diyip 5 elemanlı olacak şekilde oluşturduk.(Çünkü çıktısını almak istediğimiz "Bugün" string'i 4 index yani 5 elemandan oluşuyor.)
        mesaj.getChars(0,5,karakterler,0);  //'getChars()' operasyonu 'karakterleri al' demektir. Operasyonu yazdığımızda ide'miz bize bu 'getChars()' fonksiyonunun 'void' olduğunu söyler. Yani 'void' demek sonucu return etmiyor demektir.(Bir şey döndürmüyor demektir.) Operasyonun kullanımına gelirsek parantez içine 4 tane girdiyi argüman olarak veririz. İlk girdimiz 'srcBegin'dir diğeri ise 'srcEnd'dir peki bunlar nedir? Diyelim ki mesaj değişkenindeki "Bugün" kelimesini ekrana yazdırmak istiyoruz bakarsak "Bugün" kelimesi 0.index'ten başlayıp(0.index = "B"dir) 4.index'te bitiyor(4.index = "n"dir). Bunu operasyona 'srcBegin = 0' ve 'srcEnd = 5' olarak yazarız. Yani ekrana yazdırmak istediğimiz kelimenin index'i kaçta bitiyorsa(bu örneğe göre "Bugün" kelimesi 4. index'te bitiyor) ona +1 ekleyip o şekilde yazarız böylece 'srcEnd = 5' olur. Bunu böyle yapmamızın sebebi ise; 'getChars()' operasyonu son index'in değeri kaçsa(mesela '5') çıktı verirken o index'i(yani 5'i) çıktıya dahil etmez. Yani 'srcEnd = 5' yazmak demek 0.index'ten başlayıp 4.index'e kadar olan tüm karakterleri(4.index'teki karakterde dahil) çıktı vermek demektir.(Sonuç olarak 5.index çıktıya dahil değildir.) Operasyon bu şekilde çalıştığı için son index'e '4' yazmak yerine '5' yazarız. Buradan operasyonun 3. girdisine gelirsek şu yazar; '@NotNull char[] dst' diyor yani bize bu aldığı karakterleri("Bugün") nereye aktaracağını soruyor. Operasyonun adından anlaşılacağı üzere('getChars = karakterleri al') biz karakterleri alıyoruz dolayısıyla aldığımız bu karakterleri bir yere koymamız gerekiyor. Fonksiyon bize bu aldığımız karakterleri 'char' türünde bir array içerisine('char[]') koymamızı söylüyor. Bu noktada bir üst satıra geçip 'char' türünde array oluştururuz. Bir üst satırda 'char' türünde 'karakterler' adında 5 elemanlı(4 index) bir array oluşturduk. Operasyona geri dönersek 3. girdi bizden oluşturduğumuz 'char' türündeki array'in adını yazmamızı istiyor dolayısıyla 3. girdi olarak 'karakterler' yazarız. Operasyonun son girdisine gelirsek son girdi bize 'int dstBegin' diyor.(Buradaki 'dst' ifadesi 'destination'dan gelir ve 'hedef' demektir. Bu örnekteki hedef 'karakterler' array'idir.) Bu ifade bize şunu söyler; Atayacağımız karakterleri("Bugün) kaçtan başlayarak(yani kaçıncı karakterden başlayarak) 'karakterler' array'i içerisine atayayım? Yani atama yapacağımız karakterleri("Bugün") 'karakterler' array'i içerisine dizmeye kaçıncı yerden başlayayım? demektir. Örnek verirsek 15 elemanlı array oluşturduk diyelim 'int dstBegin = 1' dersek ve atama yapmak istediğimiz string 5 elemanlı ise("Bugün" gibi) array içine dizmeye ilk yeri boş bırakıp ikinci yerden başlayarak yapar çünkü başlangıca '1' dedik.(int dstBegin = 1) Ve sonuç olarak çıktıyı ' Bugün         ' şeklinde verir. Bu örneğimize tekrar dönersek son girdiye yani 'int dstBegin'a '0' değerini veririz.(int dstBegin = 0) Böylece atamak istediğimiz "Bugün" string'ini, 'karakterler' array'î içerisine 0. yerden yani en baştan başlayarak dizmesini sağlamış oluruz. Sonuç olarak 'mesaj.getChars(0,5,karakterler,0)' kodu şu anlama gelir; mesaj değişkeni içerisindeki 0.index'ten başlayıp 5.index'te biten karakterleri(5. index dahil değil) yani "Bugün"ü, 'karakterler' ismindeki array'in içerisine 0.yerden(index'ten) başlayarak diz. Kodu çalıştırmak için alt satıra geçersek;
        System.out.println(karakterler);  //Bir üst satırda 'getChars()' ile yazdığımız kodu, sonuç olarak char türündeki 'karakterler' array'i içerisine attığımız için 'System.out.println(karakterler)' diyerek ekrana yazdırırız. Böylece console'da 'Bugün' çıktısını almış oluruz.

        //'indexOf()' ve 'lastIndexOf()' operasyonları
        System.out.println(mesaj.indexOf('a'));           //'indexOf()' operasyonu girdi olarak 'string' ya da 'char' tipinde bir değer alır. Yani operasyona metinsel bir ifadeyi(string) ya da karakteri(char) girdi olarak veririz. 'indexOf()' operasyonu bu girdi olarak verilen string veya char'ın değişken içerisinde kaçıncı eleman(index) olduğunu bulmaya yarar. Bu örneğimize bakarsak mesaj.indexOf('a') demişiz yani mesaj değişkeni içerisinde bulunan 'a' karakteri kaçıncı index'te yer alır bize bunu söyle demek istemişiz. Kodumuzu çalıştırırsak bize çıktı olarak '7' değerini verir. Çünkü 'a' karakteri 7.index'te yer alır.("Bugün ha") Burada önemli olan 2 nokta vardır ilki index sayımı 0,'dan başlar ikincisi ise boşlukta bir karakter sayılır. Dolayısıyla saydığımızda 'a' karakteri 7. index'te yer alır. Ayrıca dikkat edersek mesaj değişkeni içerisinde başka bir 'a' harfi(karakteri) daha vardır. Peki bu operasyon bize hangisinin index'ini çıktı olarak verir? Burada bilmemiz gereken şey 'indexOf()' operasyonu ilk bulduğu 'a' karakterinin index'ini çıktı olarak verir ve operasyonu tamamlar. Yani ilk bulduğu 'a' karakterinden sonra aramayı bitirir ve index değerini ekrana yazdırır. Değişken içerisinde bulunan ve bulduğu 'a'dan sonra gelen diğer 'a' harflerini önemsemez. NOT: Bu örneğimizde 'a' karakterini girdi olarak verdik ancak en başta söylediğimiz gibi isteseydik bir string değeride("av" gibi) girdi olarak verip string'in değişkendeki index'ini çıktı olarak alabilirdik. Örnek verirsek mesaj.indexOf("av") diyip kodun çıktısını aldığımızda bize ekrana '7' değerini yazdığını görürüz. Çünkü "av" string'indeki 'a' karakteri 7.index, 'v' ise 8.index'tir dolayısıyla ekrana string'in başlangıç değeri olan 'a'nın index'ini yani 7'yi yazdırır. NOT2: Bu 'indexOf()' operasyonumuz arama yapacağı karakteri veya string'i, arama yaptığı değişkenin başından başlayıp arayan ve index değerini ona göre veren bir operasyondur. Şimdi alt satırda ise yine bu operasyona benzeyen fakat ufak bir farkı olan 'lastIndexOf()' operasyonuna bakalım.
        System.out.println(mesaj.lastIndexOf('e'));   //'lastIndexOf()' operasyonuda arama yapacağı karakterin veya string'in(girdi olarak aldığı) arama yaptığı değişken içerisinde kaçıncı index'te olduğunu baştan sayarak bulur ve bulduğu index'in değerini ekrana çıktı olarak verir. Yukarıda yazdığımız 'indexOf()' operasyonuna çok benziyor ancak 'indexOf()'tan farkı şudur; 'lastIndexOf()' operasyonu kendisine girdi olarak verilen yani bulmaya çalıştığı karakter veya string'i değişken içerisinde sondan başlayarak arar ve ilk bulduğu karakterin veya string'in index değerini baştan sayarak(yani saymaya sondan değilde baştan 0.index'ten başlar) hesaplar ve değeri ekrana yazdırır. Bildiğimiz gibi 'indexOf()' operasyonu arama yapmaya baştan başlardı ve index değerinide en baştan sayarak(0.index'ten başlayıp) ekrana yazdırırdı. Özetlersek 'lastIndexOf()' operasyonuda baştan sayarak index değerini verir ancak arama yapmaya sondan başlar.('indexOf()' operasyonu aramaya baştan başlar ve bulduğu index değerinide baştan sayarak çıktı olarak verir.) Örneğimize bakarsak mesaj.lastIndexOf('e') demişiz ve kodu çalıştırdıktan sonra 18 değerini çıktı olarak almışız. Değişken içerisine bakarsak 'e' karakteri en sonlarda yer alır dolayısıyla 'lastIndexOf()' operasyonu en baştan yani 0.index'ten başlayıp 'e' karakterinin bulunduğu index'e kadar sayma yapar ve 'e'nin bulunduğu index değerini yani 18'i çıktı oarak verir.

        //'indexOf()' operasyonu ile 'lastIndexOf()' operasyonu arasındaki farkı anlamak için en güzel örnek bu aşağıda yazdığımız örnektir. Görüldüğü gibi 'indexOf()' operasyonu saymaya da aramaya da en baştan başladığı için bize çıktı olarak değişken içerisindeki ilk bulduğu 'a' karakterinin('hava' kelimesinde 'h'den sonra gelen ilk 'a'yı) index'i olan 7 değerini verdi. Diğer operasyonumuz olan 'lastIndexOf()' ise arama yapmaya sondan başlayıp sayma işlemini baştan başlayarak yaptığı için çıktı olarak değişken içerisinde sondan ilk bulduğu 'a' karakterinin('hava' kelimesinde son 'a'yı) index'i olan 9 değerini verdi.(Çünkü index sayma işlemini baştan başlayarak yaptığı için) Özetlersek iki operasyonumuzda girdi olarak aldığı string veya karakterin index'ini bulduktan sonra sayma yapma işlemini baştan yani 0.index'ten başlayarak yapar ve elde ettiği index değerini çıktı olarak verir ancak ikisi arasındaki tek fark şudur; biri arama yapmaya baştan başlar['indexOf()'], diğeri ise arama yapmaya sondan başlar.['lastIndexOf()']
        System.out.println(mesaj.indexOf('a'));           //Çıktı olarak '7' verdi.
        System.out.println(mesaj.lastIndexOf('a'));   //Çıktı olarak '9' verdi.
        */

        //String'lerin devamı(2.ders)

        //'replace()' operasyonu
        System.out.println(mesaj.replace(' ', '-'));  //'replace' ifadesi Türkçe 'değiştirmek' anlamına gelir. 'replace()' operasyonu girdi olarak iki değer(genelde karakter) alır. Örneğimize bakarsak mesaj değişkenimizdeki boşluk olan yerleri, '-'(orta çizgi) karakteri ile değiştirelim. Yani boşluklara orta çizgi('-') atayacağız. Operasyon ilk girdi olarak 'char oldChar' yani eski karakteri alıyor. Bize neyi neyle değiştirmek istiyoruz diye soruyor. Biz de 'oldChar' olarak ' '(boşluk) giriyoruz. Çünkü değiştirmek istediğimiz şey ' '(boşluk)tur. İlk girdinin ardından 'virgül(,)' koyup bakarsak bizden ikinci girdi olarak 'char newChar' diye yeni bir karakter girmemizi istediğini görürüz. İkinci girdi olarak neyle değiştirmek istiyorsak o karakteri gireceğiz. Yani 'newChar' olarak '-'(orta çizgi) karakterini gireriz. Çünkü istediğimiz şey ' '(boşlukları), '-'(orta çizgi) karakteri ile değiştirmek. Sonuç olarak operasyonumuzu mesaj.replace(' ', '-') şeklinde yazmış oluruz. Kodumuzu çalıştırırsak bize çıktı ekranında 'Bugün-hava-çok-güzel.'i verdiğini görürüz. Yani değişken içerisinde boşluk olan her yeri '-'(orta çizgi) karakteri ile değiştirmiş olduk.

        String yeniMesaj = mesaj.replace(' ', '-');  //Yukarıda 'replace' operasyonu ile aldığımız çıktıyı(Bugün-hava-çok-güzel.) ileride farklı yerlerde kullanmak istiyorsak bu işlemi yeni bir değişken tanımlayıp o değişkene 'replace' operasyonunu tanımlayarak yaparız. Bu işlemi yeni bir değişkene atama yaparak yaptık çünkü yukarıdaki gibi sadece System.out.println(mesaj.replace(' ', '-')); yazıp çıktı alırsak bu aldığımız çıktıyı başka bir yerde kullanamayız. Yani bu çıktının altına('replace()' operasyonu sonucu aldığımız çıktıyı kastediyoruz) System.out.println(mesaj) yazıp kodu çalıştırırsak bize yine ilk çıktımız olan 'Bugün hava çok güzel.' ifadesini tekrardan verir. Dolayısıyla bu 'replace()' operasyonu sonucu aldığımız çıktıyı(Bugün-hava-çok-güzel.) ileride farklı yerlerde kullanmak için yeni bir değişken tanımlayıp o değişkene 'replace()' operasyonunu yazarak bu işlemi yapabiliriz.(Burada yaptığımız gibi)  NOT: String fonksiyonların neredeyse çoğu ilgili metnin kendisini değiştirmez(yani orijinal değişken neyse odur) bunun yerine yeni bir çıktı üretir.
        System.out.println(yeniMesaj);                               //'replace' fonksiyonu en yoğun kullanılan string fonksiyonlarından biridir.

        //'substring()' operasyonu
        System.out.println(mesaj.substring(2));  //Diğer yoğun olarak kullandığımız string fonksiyonlarından biri 'substring()'dir. 'substring()' operasyonunun görevi; bir metnin içerisinden parça almaktır. Operasyonumuzun iki çeşit kullanımı vardır. Bu satırda ilk kullanımına bakacağız. İlk kullanımda 'substring()' fonksiyonu tek girdi alır. Bu örneğimiz için 'mesaj.substring()' yazarsak bize 'nereden itibaren alayım?' demek istiyor. Girdi olarak '2' verdiğimizde 'mesaj.substring(2)' şeklinde yazarız. Yani 'mesaj değişkeninde 2.index'ten itibaren alarak(2'de dahil) ekrana yazdır' demiş oluruz. Kodumuzu çalıştırırsak 'gün hava çok güzel.' ifadesini verdiğini görürüz. Yani değişkenin 2.index'i olan 'g'den itibaren geriye kalan tüm her şeyi ekrana yazdırmış olduk. Sonuç olarak değişkenin 0. ve 1. index'leri olan 'Bu'yu yazdırmayıp 2.index olan 'g'den itibaren yazdırmaya başlamış oldu.(2.index 'g'de dahil) Özetlersek 'substring(2)' dediğimizde mesaj'ın 2.index'inden('g'den) itibaren parçala demiş oluruz.
        System.out.println(mesaj.substring(2,4));          //'substring()' operasyonunun ikinci kullanımı ise şöyledir; ilk kullanımda tek girdi vererek kesmek istediğimiz başlangıç index'ini vermiş olduk ve sonuç olarak 2.index'ten itibaren(2'de dahil) geriye kalan tüm index'leri bize ekrana yazdırdı. Bu kullanım ise hem başlangıç index'ini hem de bitiş index'ini girdi olarak alır ve değişkende hangi index'ler arasını istiyorsak onun çıktısını almamızı sağlar. Yani 'substring()'in ikinci kullanımında iki tane girdi veririz bunlar başlangıç ve bitiş index'lerimiz olur, operasyonumuz çıktı olarak bu başlangıç ve bitiş index'leri arasındaki string'leri ekrana yazdırır. Burada dikkat etmemiz gerek şey bitiş index'i olarak girdiğimiz değer çıktı alırken ekrana yazdırılmaz.(bitiş index'i sonuca dahil değildir) Yani 'mesaj.substring(2,4)' dersek operasyon bize çıktı olarak mesaj değişkeninin 2.ve 3.index'lerinin değerini ekrana yazdıracaktır. Bitiş index'i olan 4. index'imiz sonuca dahil edilmez! Kodumuzu çalıştırırsak bize çıktı olarak 'gü' verdiğini görürüz. Yani 2. ve 4. index'ler arasındaki(4. index dahil değil) string değeri olan 'gü'(2.ve 3. index) ekrana yazdırılmış oldu. Özetlersek; 'substring(2,4)' demek 2'den başla 4'e kadar(4 dahil değil) index'lerin değerini ekrana yazdır demektir.

        //'split()' operasyonu
        for (String kelime : mesaj.split(" ")){      //'split' fonksiyonu 'bölmek' demektir. Örneğimize bakarsak 'Bugün hava çok güzel.' ifadesindeki kelimeleri ayırmak(bölmek) istiyorsak bu işlemi değişken içerisindeki boşluk karakterlerini bularak yapmamız gerekir. Baktığımız zaman sonuç olarak bize 'Bugün', 'hava', 'çok', 'güzel.' kelimelerini ayrı ayrı olacak şekilde birer dizi olarak verir. Bunun sebebi ise 4 tane ayrı kelime olmasıdır yani bunları bize bir dizi olarak verir. Bundan dolayı bir 'foreach' döngüsü kullanacağız çünkü 'split()' operasyonunun bize bir dizi döndürdüğünü biliyoruz. 'foreach' döngüsünü 'for (String kelime : mesaj.split(" "))' şeklinde yazarak oluştururuz. Yani burada mesaj.split(" ") ifadesiyle 'mesaj değişkeni içerisindeki string'leri boşluğa göre böl' demiş olduk. Daha sonra döngümüz içerisine 'System.out.println(kelime);' yazıp kodumuzu çalıştırdık böylece değişken içerisindeki tüm kelimeleri boşluk olan yerden bölerek tek tek olacak şekilde(yani alt alta) ekrana yazdırmış olduk. 'split()' operasyonu da önemli bir operasyondur ve sıklıkla kullanılır.
            System.out.println(kelime);
        }

        //'toLowerCase()' ve 'toUpperCase()' operasyonları
        System.out.println(mesaj.toLowerCase());            //'toLowerCase()' operasyonuda sıklıkla kullanılır. 'lower case' ifadesi Türkçe 'küçük harf' demektir. Bu operasyon değişken içerisindeki tüm string ifadeyi küçük harfe dönüştürüp bize çıktı olarak verir. Yani 'System.out.println(mesaj.toLowerCase());' yazarsak bize mesaj değişkeni içerisindeki tüm string değerleri küçük harfe dönüşürüp verecektir. Kodu çalıştırırsak ekrana 'bugün hava çok güzel.' ifadesini çıktı olarak verdiğini görürüz. Görüldüğü gibi değişken içerisindeki tüm harfleri küçük harf olacak şekilde yazdırdı.('Bugün'ün 'B'si küçüldü ve 'b'ye dönüştü)
        System.out.println(mesaj.toUpperCase());            //'toUpperCase()' operasyonuda değişken içerisindeki tüm string ifadeyi büyük harf olacak şekilde ekrana yazdırır. Yani 'System.out.println(mesaj.toUpperCase());' yazıp kodu çalıştırırsak bize mesaj değişkeni içerisindeki tüm string değerleri büyük harfe dönüşürüp verecektir. Sonuç olarak 'BUGÜN HAVA ÇOK GÜZEL.' ifadesini ekrana yazdırır. Özetlersek; değişken içerisindeki kelimelerin bütün harflerini büyük harfe dönüştürüp ekrana yazdırmış oldu. NOT: Buradaki küçük ve büyük harfe dönüştürme operasyonlarını özellikle veritabanlarına arama ifadesi gönderdiğimiz zaman kullanırız. Çünkü veritabanlarında büyük-küçük harf duyarlılığı varsa(mesela 'B' ve 'b' harfleri birbirinden farklıdır sonuçta biri büyük diğeri küçük harftir) biz de elimizdeki hem arama ifadesini hem de karşı data'yı büyük-küçük harfe dönüştürüp(artık hangisi lazımsa) bu tip işlemleri kolaylıkla yapabiliriz. Özetlersek; veritabanı aramalarında 'toLowerCase()' ve 'toUpperCase()' operasyonu sıklıkla kullanılır.

        //'trim()' operasyonu
        String mesaj3 = "    Bugün hava çok güzel.    ";    //Aynı değişkenimizi başına ve sonuna boşluk bırakıp yeniden oluşturduk.
        System.out.println(mesaj3);                         //Başından ve sonundan boşluk bırakarak oluşturduğumuz mesaj3 değişkenini ekrana yazdırıp bakarsak bize iki tarafından da boşluk olacak şekilde '    Bugün hava çok güzel.    ' ifadesini verdiğini görürüz. İşte buradaki boşlukları kaldırmak için 'trim()' operasyonunu kullanılırız. Yani 'trim()' operasyonu sayesinde değişkenimizin başındaki ve sonundaki boşlukları atabiliriz. Yaparsak;
        System.out.println(mesaj3.trim());                  //Görüldüğü gibi 'System.out.println(mesaj3.trim());' yazıp kodumuzu çalıştırırsak bize çıktı olarak başında ve sonunda boşluk olmayacak şekilde 'Bugün hava çok güzel.' ifadesini verdiğini görürüz. Yani mesaj3 değişkenini trim'lemiş(kırpmış) oluruz. Böylece değişkenin başındaki ve sonundaki boşluklar gitmiş olur. NOT: Özellikle farklı kaynaklardan data'yı aldığımız zaman kaynak uyuşmazlığından dolayı bu örnekteki gibi başında ve sonunda boşluk olan string değişkenlerle karşılaşabiliyoruz. İşte bu tarz durumlarda 'trim()' fonksiyonunu kullanarak başında veya sonunda(ya da hem başında hem sonunda) boşluk olan string değişkenimizdeki boşlukları kırpıp atarak normal şekilde yani boşluksuz olarak yazdırabiliyoruz.

    }
}
